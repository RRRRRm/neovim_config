call plug#begin(stdpath('data') . '/plugged')
" Plugins go here
" Know that powerful tools require powerful control
" 须知强力工具需要强力掌控
" 
" =====主题=====
Plug 'cocopon/iceberg.vim'    " 配合 arc theme
"Plug 'junegunn/seoul256.vim'  " 超好看的低对比度主题
"Plug 'RRRRRm/seoul256-airline' " airline支持
Plug 'altercation/vim-colors-solarized' " solarized主题
"Plug 'morhetz/gruvbox'        " gruvbox主题
"Plug 'nightsense/strawberry'  " 粉色vim主题
"Plug 'soft-aesthetic/soft-era-vim' " 粉色*2
"Plug 'ayu-theme/ayu-vim'      " 赏心悦目的绿色主题
"Plug 'rakr/vim-two-firewatch' " 浅亚麻色
"Plug 'cormacrelf/vim-colors-github' " 据说statuline超好看
"Plug 'edkolev/tmuxline.vim'  " 导出状态栏至tmux

" =====实用插件=====
Plug 'Lilja/vim-chezmoi'    " :w 提交到 chezmoi
let g:chezmoi = "enabled"
Plug 'sheerun/vim-polyglot' " 语言包(包含vim-sensible)
"Plug 'sindrets/diffview.nvim.git' " Better vimdiff!!
"Plug 'plasticboy/vim-markdown', { 'for': 'markdown'} " Markdown, in polyglot
Plug 'vim-latex/vim-latex', { 'for': 'tex'}     " LaTeX支持
Plug 'octol/vim-cpp-enhanced-highlight' " c/cpp highlighting
"Plug 'ap/vim-css-color'       " 颜色显示
Plug 'RRethy/vim-hexokinase' " 颜色显示
"Plug 'tpope/vim-endwise'      " 自动结束结构, 与COC冲突???
Plug 'honza/vim-snippets'     " 代码片段仓库
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'tpope/vim-sensible'    " 我当然是个理智的人
"Plug 'SirVer/ultisnips'      " 代码片段
"Plug 'vimcn/vimcdoc'         " vim中文文档
"Plug 'Valloric/YouCompleteMe', { 'do': 'MAKEFLAGS=12 ./install.py' } " 代码补全
Plug 'terryma/vim-multiple-cursors'             " 多行编辑
Plug 'airblade/vim-gitgutter'                   " git
"Plug 'dense-analysis/ale'                       " 代码异步检测插件
Plug 'Raimondi/delimitMate'                     " 括号自动补全
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " 文件管理器
Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'jistr/vim-nerdtree-tabs'
Plug 'godlygeek/tabular'                "对齐文本与表格
"Plug 'WolfgangMehner/bash-support'      " Bash, 和 COC 冲突
Plug 'luochen1990/rainbow'              " 彩虹括号
"Plug 'nathanaelkane/vim-indent-guides' " 缩进高亮
Plug 'Yggdroot/indentLine'              " 缩进线
Plug 'tpope/vim-surround'    " 增强配对符号编辑(快速加括号等), 文本对象s
Plug 'ludovicchabant/vim-gutentags' " Gtag client
Plug 'skywind3000/gutentags_plus'   " 数据库无缝切换
Plug 'skywind3000/asyncrun.vim'     " 异步命令
Plug 'skywind3000/asynctasks.vim'   " 异步tasks
"Plug 'puremourning/vimspector'     " 调试器!!!
Plug 'easymotion/vim-easymotion'    " 快速跳转
Plug 'Yggdroot/LeaderF'   " 搜索插件
Plug 'lilydjwg/fcitx.vim' " 输入法切换, 需要fcitx-remote
Plug 'dstein64/nvim-scrollview' " 滚动条
Plug 'mboughaba/i3config.vim' "i3配置文件
"Plug 'neoclide/coc.nvim', {'branch': 'release'} " 代码补全
"Plug 'repeat.vim'        " 使用.重复命令
"Plug 'christoomey/vim-tmux-navigator' " 与tmux配合
"Plug 'mattn/emmet-vim'   " 前端神器不解释
"Plug 'liuchengxu/vista.vim'  " Viewer & Finder for LSP symbols and tags in Vim
"Plug 'kana/vim-textobj-user' " textobj全家桶, 新增文本对象
"Plug 'kana/vim-textobj-indent'
"Plug 'kana/vim-textobj-syntax'
"Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
"Plug 'sgur/vim-textobj-parameter'
" Neovim Built-in LSP
Plug 'neovim/nvim-lspconfig'
Plug 'glepnir/lspsaga.nvim'

"==========DETECT OS==========
let uname=substitute(system('uname'), '\n', '', '')
"==========FOR MACOS====k======
if uname == 'Darwin'
  Plug 'darfink/vim-plist' "编辑plist
  Plug 'rizzatti/dash.vim' " 允许使用:Dash 系列命令
endif
"==========FOR MACOS END==========
call plug#end()

set encoding=utf-8 "支持多字节字符
scriptencoding utf-8 "支持多字节字符, 和上一条的顺序不能变
set termguicolors "vim真彩色支持
set guifont=Operator\ Mono:h11
set guifontwide=方正清刻本悦宋\ 简繁:h11
set title
"colorscheme seoul256 " 设置主题
"let g:airline_theme = 'seoul256'
"==========FOR LINUX==========
if uname == 'Linux'
  if empty($DISPLAY) && empty($SSH_TTY) " In tty
    colorscheme solarized " 设置主题
    set background=dark " 日间/夜间背景
  else " In GUI or SSH
    colorscheme iceberg " 设置主题
    set background=light " 日间/夜间背景
  endif
endif

"==========FOR LINUX END==========

set signcolumn=auto:9 " 符号列自动增长, Neovim
let g:airline_theme='iceberg'
"let g:gruvbox_termcolors = 256
"hi Normal ctermfg=252 ctermbg=none
set magic "开启正则
"let g:gruvbox_contrast_dark = 'hard'
set backspace=2 "修复Mac下delete无法使用
set backupdir=/tmp "设置备份文件目录
set directory=/tmp "设置临时文件目录
"set foldmethod=syntax "代码折叠
set noshowmode " 隐藏因为airline重复的 --INSERT--
set helplang=cn " 设置帮助文件为中文
set hlsearch "检索时高亮显示匹配项
set ignorecase "检索时忽略大小写
set laststatus=2 " 总是显示状态行
set number " 显示行号
set ruler "显示位置指示器
"set autoindent "自动缩进
set smartindent "智能缩进
set smarttab "智能制表符
set tabstop=2 " 设置tab键显示长度
set softtabstop=2 " tab长度, 使用tab和空格凑出来
set shiftwidth=2 "自动缩进空白长度
set expandtab "使用空格替代制表符
"set clipboard=unnamed "使用系统剪切板
syntax on " 代码高亮
set cursorcolumn "高亮当前列
set cursorline "高亮当前行
set mouse=a " 开启鼠标模式
set wildmenu " 命令模式的补全菜单
set undofile " 保留历史记录
set undodir=~/.undodir " 统一历史记录存放位置
set hidden " 切换buffer时隐藏旧buffer
set path=$PWD/** " 将当前工作路径设为Vim PATH
" 好像有冲突, 用 `verbose map <leader>' 检查
" Leader Key!
let mapleader="\<Space>" 
"let mapleader=","
"vmap <leader>y "+y
"vmap <leader>d "+d
"nmap <leader>p "+p
"nmap <leader>P "+P
"vmap <leader>p "+p
"vmap <leader>P "+P
"filetype plugin indent on " 开启文件类型检测

""" bash-lsp-server
lua require'lspconfig'.bashls.setup{}

"""""""""""""""""""""""""""""""" 彩虹括号
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
  \ 'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
  \ 'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
  \ 'operators': '_,_',
  \ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
  \ 'separately': {
  \   '*': {},
  \   'tex': {
  \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
  \   },
  \   'lisp': {
  \     'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
  \   },
  \   'vim': {
  \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
  \   },
  \   'html': {
  \     'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
  \   },
  \   'css': 0,
  \ }
  \}

""""""""""""""""""""""""""""""""""""" vim-airline配置
if empty($DISPLAY) && empty($SSH_TTY) " In tty
  let g:airline_powerline_fonts = 0
" If not in GUI or SSH, don't using "  "
else 
  let g:airline_powerline_fonts = 1
  let g:airline_left_sep = ' '
  let g:airline_left_alt_sep = '│'
  let g:airline_right_sep = ' '
  let g:airline_right_alt_sep = '│'
endif
let g:airline#extensions#tabline#enabled = 1 "只打开一个选项卡时自动显示所有缓冲区
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '│' "tab分隔符
"let g:airline#extensions#ale#enabled = 1 "检错airline支持,默认即开启
"let g:airline#extensions#coc#enabled = 1 "检错airline支持,默认即开启
let g:airline_mode_map = {} " 补全的时候不要显示 INSERT COMPL
let g:airline_mode_map['ic'] = 'INSERT' " 同上

""""""""""""""""""""""""""""""""""""""""""""""YouCompleteMe配置
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
"let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
"let g:ycm_server_python_interpreter='/usr/local/bin/python3'
"let g:ycm_collect_identifiers_from_tags_files = 1 "开启YCM标签补全引擎
"let g:ycm_show_diagnostics_ui = 0 "关闭YCM辣鸡代码检测
"let g:ycm_enable_diagnostic_signs = 0
"let g:ycm_enable_diagnostic_highlighting = 0
"let g:ycm_seed_identifiers_with_syntax=1 "语言关键字补全
""自动语义补全
"let g:ycm_semantic_triggers = {
"\ 'c,cpp,python,java,go,erlang,perl' : ['re!\w{2}'],
"\ 'cs,lua,javascript' : ['re~\w{2}'],
"\}
"
"i3config
aug my_ft_detection
  au!
  au BufNewFile,BufRead ~/.config/i3/config set filetype=i3config
  au BufNewFile,BufRead ~/.local/share/chezmoi/dot_config/i3/config set filetype=i3config
  au BufNewFile,BufRead ~/.local/share/chezmoi/dot_zshrc set filetype=zsh
  au BufNewFile,BufRead ~/.config/fontconfig/fonts.conf set filetype=xml
  au BufNewFile,BufRead ~/.local/share/chezmoi/dot_config/fontconfig/fonts.conf set filetype=xml
  au BufNewFile,BufRead ~/.config/polybar/config set filetype=dosini
  au BufNewFile,BufRead ~/.local/share/chezmoi/dot_config/polybar/config set filetype=dosini
aug end

""""""""""""""""""""""""""" lspsaga """""""""""""""""""""""""""""""""

lua << EOF
local saga = require 'lspsaga'

-- add your config value here
-- default value
-- use_saga_diagnostic_sign = true
-- error_sign = '',
-- warn_sign = '',
-- hint_sign = '',
-- infor_sign = '',
-- dianostic_header_icon = '   ',
-- code_action_icon = ' ',
-- code_action_prompt = {
--   enable = true,
--   sign = true,
--   sign_priority = 20,
--   virtual_text = true,
-- },
-- finder_definition_icon = '  ',
-- finder_reference_icon = '  ',
-- max_preview_lines = 10, -- preview lines of lsp_finder and definition preview
-- finder_action_keys = {
--   open = 'o', vsplit = 's',split = 'i',quit = 'q',scroll_down = '<C-f>', scroll_up = '<C-b>' -- quit can be a table
-- },
-- code_action_keys = {
--   quit = 'q',exec = '<CR>'
-- },
-- rename_action_keys = {
--   quit = '<C-c>',exec = '<CR>'  -- quit can be a table
-- },
-- definition_preview_icon = '  '
-- "single" "double" "round" "plus"
-- border_style = "single"
-- rename_prompt_prefix = '➤',
-- if you don't use nvim-lspconfig you must pass your server name and
-- the related filetypes into this table
-- like server_filetype_map = {metals = {'sbt', 'scala'}}
-- server_filetype_map = {}

saga.init_lsp_saga {
-- your custom option here
error_sign = 'E',
}

--or --use default config
--saga.init_lsp_saga()
EOF

"""" Async Lsp Finder
"" lsp provider to find the cursor word definition and reference
nnoremap <silent> gh :Lspsaga lsp_finder<CR>

"""" Code Action
"" code action
nnoremap <silent><leader>ca :Lspsaga code_action<CR>
vnoremap <silent><leader>ca :<C-U>Lspsaga range_code_action<CR>

"""" Hover Doc
"" show hover doc
nnoremap <silent>K :Lspsaga hover_doc<CR>

"" scroll down hover doc or scroll in definition preview
nnoremap <silent> <C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
"" scroll up hover doc
nnoremap <silent> <C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>

"""" SignatureHelp
"" show signature help
nnoremap <silent> gs :Lspsaga signature_help<CR>

"" and you also can use smart_scroll_with_saga to scroll in signature help win

"""" Rename
"" rename
nnoremap <silent>gr :Lspsaga rename<CR>
"" close rename win use <C-c> in insert mode or `q` in noremal mode or `:q`

"""" Preview Definition
"" preview definition
nnoremap <silent> gd :Lspsaga preview_definition<CR>
"" can use smart_scroll_with_saga to scroll

"""" Jump Diagnostic and Show Diagnostics
"" show
nnoremap <silent> <leader>cd :Lspsaga show_line_diagnostics<CR>

"" only show diagnostic if cursor is over the area
nnoremap <silent><leader>cc <cmd>lua require'lspsaga.diagnostic'.show_cursor_diagnostics()<CR>

"" jump diagnostic
nnoremap <silent> [e :Lspsaga diagnostic_jump_next<CR>
nnoremap <silent> ]e :Lspsaga diagnostic_jump_prev<CR>

"""" Float Terminal
"" float terminal also you can pass the cli command in open_float_terminal function
nnoremap <silent> <A-d> :Lspsaga open_floaterm<CR>
tnoremap <silent> <A-d> <C-\><C-n>:Lspsaga close_floaterm<CR>

"""""""""""""""""""""""""" lspsaga end """"""""""""""""""""""""""""""

"""""""""""""""""ALE配置""""""""""""""""""""
"let g:ale_sign_error = '>>'
"let g:ale_sign_warning = '--'
"let g:ale_completion_enabled = 0 "关闭补全
"let g:ale_sign_column_always = 1 "随时显示侧边栏
"let g:ale_vim_vint_executable = 'vint'
"highlight ALEError guibg=#D69E9B ctermbg=red cterm=undercurl
"highlight ALEWarning guibg=#EDECA9 ctermbg=yellow cterm=undercurl
""显示Linter名称,出错或警告等相关信息
"let g:ale_echo_msg_error_str = 'E'
"let g:ale_echo_msg_warning_str = 'W'
"let g:ale_echo_msg_format = '[%linter%] %severity%: %s'
""代码格式化配置,确保这些工具都已安装
"let g:ale_fixers = {
"\ '*': ['remove_trailing_lines', 'trim_whitespace'],
"\ 'javascript': ['eslint'],
"\ 'json':['jq'],
"\ 'c':['clang-format'],
"\ 'cpp':['clang-format'],
"\ 'lua':['luacheck'],
"\ 'sh':['shfmt'],
"\ 'zsh':['shfmt', 'remove_trailing_lines', 'trim_whitespace'],
"\ 'sql':['sqlfmt'],
"\ 'python':['black'],
"\ 'markdown':['prettier'],
"\ 'TypeScript':['prettier'],
"\ 'xml':['xmllint']
"\}
"let g:ale_linters = {
"\ 'python': ['flake8'],
"\ 'reStructuredText': ['rstcheck'],
"\ 'markdown': ['redpen', 'mdl']
"\}
"call ale#Set('python_black_options', ' -l 79')
""let g:ale_fix_on_save = 1 "自动格式化
""""""""""""""""""ALE END""""""""""""""""""""""""

""""""""""""""Gutentags: Ctag/Gtag设置""""""""""""""""""
let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/etc/gtags.conf'
"let $GTAGSCONF = '~/.globalrc'
set tags=./.tags;,.tags " CTag
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
  let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
  let g:gutentags_modules += ['gtags_cscope']
endif
" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 如果使用 universal ctags 需要增加下面一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

"""""""""""""""""""""""""""Leaderf
let g:Lf_StlColorscheme = 'one'
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}


""""""""""""""""""""""""" AsyncRun 编译运行
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1

" 检测到文件类型为Python
"autocmd BufEnter *.py set conceallevel=2

""""""""""""""""""""""""""" vimtex
let g:tex_flavor='latex'
let g:vimtex_view_method='open'
let g:vimtex_quickfix_mode=0
" LaTeX代码隐藏或者替换成其他符号
let g:tex_conceal='abdmgs'

""""""""""""""""""""""""" vim-markdown
"set conceallevel=2 " 代码隐藏, 隐藏或显示listchars定义的替换字符
" 用vim-polyglot 禁止基于语法的隐藏
let g:vim_json_syntax_conceal = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
" vim-markdown 兼容性设置
let g:vim_markdown_math=1 " LaTeX
let g:vim_markdown_folding_disabled = 1 " 禁止折叠

"""""""""""""""""""""""""" 缩进线
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
"autocmd BufEnter *.md,*.markdown,*.tex,*.latex IndentLinesToggle "为Markdown/LaTeX关闭缩进线以免插件冲突
"autocmd BufEnter *.md,*.markdown,*.tex,*.latex,*.sty,*.cls set concealcursor= "为Markdown/LaTeX关闭缩进线以免插件冲突

""""""""""""""""""""""""""" vim-hexokinase (显示文本颜色)
let g:Hexokinase_highlighters = ['foreground','sign_column'] " virtual sign_column background[full] foreground[full]
let g:Hexokinase_refreshEvents = ['BufWrite', 'BufRead','TextChanged', 'InsertLeave'] " BufWrite BufRead TextChanged InsertLeave

"=============== 快捷键配置=====================

""""""" jk 快速<esc> """""""
inoremap jk <esc>

"""""" 插入匹配括号 """""
" inoremap ( ()<LEFT>
" inoremap [ []<LEFT>
" inoremap { {}<LEFT>

""""" <F2> Leaderf快捷键 """""
noremap <F2> :LeaderfFunction!<CR>

""""" <F5> Python运行
noremap <F5> :AsyncRun -raw python % <cr>

""""" <F9> 格式化 formating """""
"" Using ALE to format code
"function! Fix()
"  ALEFix
"  retab
"endfunction
"nnoremap <F9> :call Fix()<CR>
"" Now I using COC to format code 
nnoremap <F9> :Format<CR>

""""" <F10> Nerdtree """""
noremap <F10> :NERDTreeToggle<CR>

""""" <F10> 切换 asyncrun 的 Quickfix 窗口 """""
"nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>

"""""" 配置ale的linter功能: 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
"nmap <silent> sp <Plug>(ale_previous_wrap)
"nmap <silent> sn <Plug>(ale_next_wrap)

"""""" vim-multiple-cursors """""
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

"""""" YCM 定义处跳转 """""
"nnoremap <C-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
"<Leader>s触发/关闭语法检查
"nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
"nmap <Leader>d :ALEDetail<CR>

""""" <ESC> 退出LeaderF """""
let g:Lf_NormalMap = {
  \ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
  \ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
  \ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
  \ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
  \ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>'],["<F2>",':exec g:Lf_py "functionExplManager.quit()"<CR>']],
  \ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
  \ }
